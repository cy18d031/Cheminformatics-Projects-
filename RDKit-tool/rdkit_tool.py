# -*- coding: utf-8 -*-
"""RDKit-tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jUyI0QjbovN49pqPAzNa-01zNfmh3kjj
"""

# ----------------------------
# Imports
# ----------------------------
from rdkit import Chem
from rdkit.Chem import Draw, Descriptors, AllChem, rdMolDescriptors
from rdkit.Chem.Draw import MolsToGridImage
from rdkit.Chem import rdChemReactions, rdFMCS
from rdkit.DataStructs import TanimotoSimilarity, BulkTanimotoSimilarity
import pandas as pd
import numpy as np
from sklearn.cluster import AgglomerativeClustering
import matplotlib.pyplot as plt

# ----------------------------
# Sample molecules
# ----------------------------
sample_smiles = [
    ("Aspirin",    "CC(=O)OC1=CC=CC=C1C(=O)O"),
    ("Ibuprofen",  "CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"),
    ("Caffeine",   "Cn1cnc2c1c(=O)n(C)c(=O)n2C"),
    ("Nicotine",   "CN1CCCC1C2=CN=CC=C2"),
    ("Paracetamol","CC(=O)NC1=CC=C(O)C=C1"),
    ("Cyclohexane","C1CCCCC1"),
    ("Benzene",    "c1ccccc1")
]

# ----------------------------
# 1) Parse & names
# ----------------------------
def parse_smiles_list(smiles_tuples):
    parsed = []
    for name, smi in smiles_tuples:
        mol = Chem.MolFromSmiles(smi)
        parsed.append({'name': name, 'smiles': smi, 'mol': mol})
    return parsed

parsed = parse_smiles_list(sample_smiles)
names = [e['name'] for e in parsed]

# Save SDF
def save_sdf(parsed_list, out="sample_mols.sdf"):
    w = Chem.SDWriter(out)
    for entry in parsed_list:
        if entry['mol']:
            m = entry['mol']
            m.SetProp("_Name", entry['name'])
            w.write(m)
    w.close()
    print(f"Saved SDF -> {out}")

save_sdf(parsed)

# ----------------------------
# 2) Descriptors
# ----------------------------
def calc_descriptors(mol):
    return {
        'MolWt': round(Descriptors.MolWt(mol), 2),
        'LogP': round(Descriptors.MolLogP(mol), 2),
        'TPSA': round(rdMolDescriptors.CalcTPSA(mol), 2),
        'HBD': Descriptors.NumHDonors(mol),
        'HBA': Descriptors.NumHAcceptors(mol),
        'RotB': Descriptors.NumRotatableBonds(mol),
        'NumAtoms': mol.GetNumAtoms()
    }

df_descr = pd.DataFrame([
    {'name': e['name'], **calc_descriptors(e['mol'])}
    for e in parsed if e['mol']
])
print(df_descr)

# ----------------------------
# 3) Fingerprints + Similarity
# ----------------------------
def get_morgan_fp(mol, radius=2, nBits=2048):
    return AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=nBits)

fps = [get_morgan_fp(e['mol']) for e in parsed]

query_idx = names.index("Aspirin")
sims = BulkTanimotoSimilarity(fps[query_idx], fps)
sim_table = pd.DataFrame({'name': names, 'tanimoto_to_aspirin': sims})
print(sim_table.sort_values('tanimoto_to_aspirin', ascending=False))

# ----------------------------
# 4) Clustering
# ----------------------------
n = len(fps)
sim_matrix = np.zeros((n, n))
for i in range(n):
    for j in range(n):
        sim_matrix[i,j] = TanimotoSimilarity(fps[i], fps[j])
dist_matrix = 1 - sim_matrix

clustering = AgglomerativeClustering(n_clusters=3, metric='precomputed', linkage='average')
labels = clustering.fit_predict(dist_matrix)
print(pd.DataFrame({'name': names, 'cluster': labels}))

# ----------------------------
# 5) Reaction demo
# ----------------------------
smirks = "[N:1]>>[N:1]C"
rxn = rdChemReactions.ReactionFromSmarts(smirks)
paracetamol = parsed[names.index("Paracetamol")]['mol']
products = rxn.RunReactants((paracetamol,))
print(f"Reaction produced {len(products)} outcomes")

# ----------------------------
# 6) 2D & 3D viz
# ----------------------------
mols = [e['mol'] for e in parsed]
img = MolsToGridImage(mols, molsPerRow=4, legends=names)
img.show()

m3 = Chem.AddHs(parsed[0]['mol'])
if AllChem.EmbedMolecule(m3, randomSeed=42) == 0:
    AllChem.UFFOptimizeMolecule(m3)
    Chem.SDWriter("aspirin_3d.sdf").write(m3)

# ----------------------------
# 7) MCS
# ----------------------------
mcs = rdFMCS.FindMCS([parsed[names.index("Aspirin")]['mol'],
                      parsed[names.index("Ibuprofen")]['mol']])
print("MCS SMARTS:", mcs.smartsString)

print("\n--- RDKit mini-toolkit completed ---")